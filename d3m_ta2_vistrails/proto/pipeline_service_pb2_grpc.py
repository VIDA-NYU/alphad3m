# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import pipeline_service_pb2 as pipeline__service__pb2


class PipelineComputeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreatePipelines = channel.unary_stream(
        '/compute.pipeline.PipelineCompute/CreatePipelines',
        request_serializer=pipeline__service__pb2.PipelineCreateRequest.SerializeToString,
        response_deserializer=pipeline__service__pb2.PipelineCreateResult.FromString,
        )
    self.ExecutePipeline = channel.unary_stream(
        '/compute.pipeline.PipelineCompute/ExecutePipeline',
        request_serializer=pipeline__service__pb2.PipelineExecuteRequest.SerializeToString,
        response_deserializer=pipeline__service__pb2.PipelineExecuteResult.FromString,
        )
    self.StartSession = channel.unary_unary(
        '/compute.pipeline.PipelineCompute/StartSession',
        request_serializer=pipeline__service__pb2.SessionRequest.SerializeToString,
        response_deserializer=pipeline__service__pb2.Response.FromString,
        )
    self.EndSession = channel.unary_unary(
        '/compute.pipeline.PipelineCompute/EndSession',
        request_serializer=pipeline__service__pb2.SessionContext.SerializeToString,
        response_deserializer=pipeline__service__pb2.Response.FromString,
        )


class PipelineComputeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreatePipelines(self, request, context):
    """Train step - multiple result messages returned via GRPC streaming.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExecutePipeline(self, request, context):
    """Predict step - multiple results messages returned via GRPC streaming.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartSession(self, request, context):
    """Session management
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EndSession(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PipelineComputeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreatePipelines': grpc.unary_stream_rpc_method_handler(
          servicer.CreatePipelines,
          request_deserializer=pipeline__service__pb2.PipelineCreateRequest.FromString,
          response_serializer=pipeline__service__pb2.PipelineCreateResult.SerializeToString,
      ),
      'ExecutePipeline': grpc.unary_stream_rpc_method_handler(
          servicer.ExecutePipeline,
          request_deserializer=pipeline__service__pb2.PipelineExecuteRequest.FromString,
          response_serializer=pipeline__service__pb2.PipelineExecuteResult.SerializeToString,
      ),
      'StartSession': grpc.unary_unary_rpc_method_handler(
          servicer.StartSession,
          request_deserializer=pipeline__service__pb2.SessionRequest.FromString,
          response_serializer=pipeline__service__pb2.Response.SerializeToString,
      ),
      'EndSession': grpc.unary_unary_rpc_method_handler(
          servicer.EndSession,
          request_deserializer=pipeline__service__pb2.SessionContext.FromString,
          response_serializer=pipeline__service__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'compute.pipeline.PipelineCompute', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
